import ezdxf
from math import fabs

def read_dwg_and_filter_polylines(file_path):
    # 读取DWG文件
    doc = ezdxf.readfile(file_path)

    # 获取模型空间
    msp = doc.modelspace()

    # 过滤闭合的多段线
    closed_polylines = [entity for entity in msp.query('LWPOLYLINE') if entity.closed]

    return closed_polylines

def calculate_boundaries(polylines):
    min_x = min_y = float('inf')
    max_x = max_y = float('-inf')

    for polyline in polylines:
        for point in polyline.get_points():
            x, y = point[:2]  # 只获取x和y坐标
            min_x = min(min_x, x)
            max_x = max(max_x, x)
            min_y = min(min_y, y)
            max_y = max(max_y, y)

    # 计算绝对值
    abs_min_x = fabs(min_x)
    abs_max_x = fabs(max_x)
    abs_min_y = fabs(min_y)
    abs_max_y = fabs(max_y)

    # 添加一些填充（例如，范围的10%）
    padding_x = (abs_max_x - abs_min_x) * 0.1
    padding_y = (abs_max_y - abs_min_y) * 0.1

    return {
        'Boundary_Left': abs_min_x - padding_x,
        'Boundary_Right': abs_max_x + padding_x,
        'Boundary_Bottom': abs_min_y - padding_y,
        'Boundary_Top': abs_max_y + padding_y,
        'Window_Left': abs_min_x,
        'Window_Bottom': abs_min_y,
        'Window_Height': abs_max_y - abs_min_y
    }

def get_outermost_polyline(polylines):
    # 计算每个多段线的包围盒面积
    def bounding_area(polyline):
        min_x = min_y = float('inf')
        max_x = max_y = float('-inf')
        for point in polyline.get_points():
            x, y = point[:2]
            min_x = min(min_x, x)
            max_x = max(max_x, x)
            min_y = min(min_y, y)
            max_y = max(max_y, y)
        return (max_x - min_x) * (max_y - min_y)

    # 找到包围盒面积最大的多段线
    return max(polylines, key=bounding_area)

def write_section_info(polylines, output_file):
    boundaries = calculate_boundaries(polylines)
    outermost_polyline = get_outermost_polyline(polylines)

    with open(output_file, 'w') as f:
        f.write("# Section file generated by XTRACT\n")
        f.write("# Created by: 4tw\n")
        f.write(f"# Date: {2024}/{7}/{19}\n\n")

        f.write("# WARNING:  When this file is read into XTRACT, data consistency checks are NOT performed.  If inappropriate\n")
        f.write("# input data is read into the software, unexpected results may ensue.  Before modifying this file, it is advised to\n")
        f.write("# save a back up copy.  The order of the file in not important, nor is the spacing.  The file must contain Global\n")
        f.write("# Material, and Section Definitions as described below.\n\n")

        f.write("# Define the global parameters for the file separated by Begin_Global and End_Global\n")
        f.write("# Version and Units are required.\n")
        f.write("Begin_Global\n")
        f.write("\tVER = 3.08\n")
        f.write("\tUNITS = N-mm\n")
        f.write("End_Global\n")
        f.write("#---------------------------------------\n\n")

        f.write("# Begin material definition with Begin_Material and end with End_Material\n")
        f.write("Begin_Material\n")
        f.write("\tNAME = Confined1\n")
        f.write("\tTYPE = Confined Concrete\n")
        f.write("\tFc = 33.00\n")
        f.write("\tFt = 3.000\n")
        f.write("\tey = 0.003733\n")
        f.write("\tecu = 0.004733\n")
        f.write("\tFl = 44.00\n")
        f.write("\tEc = 27.19E+3\n\n")
        f.write("\t# Parameters for the confinement calculators are optional\n")
        f.write("\tcompStrength = 33.00\n")
        f.write("End_Material\n")
        f.write("#---------------------------------------\n\n")

        f.write("# Begin section definition.\n")
        f.write("Begin_Section\n")
        f.write("\tBegin_Builder\n")
        f.write("\t\tNAME = Section1\n\n")

        # 写入builder属性
        f.write(f"\t\tBoundary_Bottom = {boundaries['Boundary_Bottom']:.2f}\n")
        f.write(f"\t\tBoundary_Left = {boundaries['Boundary_Left']:.2f}\n")
        f.write(f"\t\tBoundary_Right = {boundaries['Boundary_Right']:.2f}\n")
        f.write(f"\t\tBoundary_Top = {boundaries['Boundary_Top']:.2f}\n")
        f.write("\t\tMin_Triangle_Area = 30.00\n")  # 调整后的值
        f.write("\t\tMax_Number_of_Fibers = 10000\n")  # 调整后的值

        # 写入窗口属性
        f.write(f"\t\tWindow_Left = {boundaries['Window_Left']:.2f}\n")
        f.write(f"\t\tWindow_Bottom = {boundaries['Window_Bottom']:.2f}\n")
        f.write(f"\t\tWindow_Height = {boundaries['Window_Height']:.2f}\n")
        f.write("\tEnd_Builder\n")
        f.write("\t#---------------------------------------\n\n")

        f.write("\t# Section comments or design log - optional\n")
        f.write("\tBegin_UserComments\n")
        f.write("\tEnd_UserComments\n")
        f.write("\t#---------------------------------------\n\n")

        f.write("\t# Section Shapes\n")
        for i, polyline in enumerate(polylines):
            f.write("\tBegin_Shape\n")
            if polyline is outermost_polyline:
                f.write("\t\tMATERIAL = Confined1\n")
            else:
                f.write("\t\tMATERIAL = Delete\n")
            f.write("\t\tMESH = 50.00\n")  # 调整后的值
            f.write("\t\tBegin_Line\n")

            # 写入多段线的点
            for point in polyline.get_points():
                f.write(f"\t\t\t{point[0]:.1f}, {point[1]:.1f}\n")

            # 再次写入第一个点以闭合形状
            first_point = polyline.get_points()[0]
            f.write(f"\t\t\t{first_point[0]:.1f}, {first_point[1]:.1f}\n")

            f.write("\t\tEnd_Line\n")
            f.write("\tEnd_Shape\n")
            f.write("\t#---------------------------------------\n\n")

        f.write("\t# Reinforcing bars.  Data is given comma separated in the form X, Y, Area, Prestress, Material.\n")
        f.write("\tBegin_Rebar\n")
        f.write("\tEnd_Rebar\n")
        f.write("\t#---------------------------------------\n\n")

        f.write("\t# Define the loading data, choose Moment Curvature, Capacity Orbit, or PM Interaction for loading type.\n")
        f.write("\t# Required data not defined here is taken from default values.\n")
        f.write("End_Section\n")
        f.write("#---------------------------------------\n")

# 使用示例
dwg_file = "section6.dxf"
output_file = "section_info8.sec"

closed_polylines = read_dwg_and_filter_polylines(dwg_file)
write_section_info(closed_polylines, output_file)